<?php
// $Id$

/**
 * @file
 * Allows to limit sending messages from/to role members.
 *
 * @author
 * Boobaa - http://drupal.org/user/199303
 */

/**
 * Implementation of hook_menu().
 */
function privatemsg_limitroles_menu() {
  $items = array();
  $items['admin/config/messaging/privatemsg/limitroles'] = array(
    'title' => 'Limit roles',
    'description' => 'Configure limit roles settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('privatemsg_limitroles_form_settings'),
    'access arguments' => array('administer privatemsg settings'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Build the settings form.
 */
function privatemsg_limitroles_form_settings($form, &$form_state) {
  $roles_from = user_roles();
  $roles_to = user_roles(TRUE);
  foreach ($roles_to as $rid_to => $role_to) {
    $options[$rid_to] = $role_to;
  }
  foreach ($roles_from as $rid_from => $role_from) {
    $varname = 'privatemsg_limitroles_from_' . $rid_from;
    $form[$varname] = array (
      '#type' => 'checkboxes',
      '#title' => 'Messages can be sent from ' .$role_from . ' to:',
      '#options' => $options,
      '#default_value' => variable_get($varname, array()),
      '#attributes' => array('class' => array('rid-' . $rid_from)),
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function privatemsg_limitroles_privatemsg_name_lookup($string) {
  // This is something that get coded, but does not seem to prohibit sending
  // messages to the prohibited accounts. TODO: Hooking into
  // _privatemsg_parse_userstring() seems to be the best approach to follow,
  // but it's way too much easier by utilizing some form_alter() magic.
  $roles = _privatemsg_limitroles_may_send_to();
  $result = db_query("SELECT * FROM {users} u INNER JOIN {users_roles} ur ON (ur.uid = u.uid) WHERE name = :name AND ur.rid IN (:role_ids)", array(':name' => $string, ':role_ids' => $roles));
  foreach ($result as $account) {
    // just return the first one
    return $account;
  }
  return FALSE;
}

/**
 * Implementation of hook_privatemsg_sql_autocomplete_alter().
 */
function privatemsg_limitroles_query_privatemsg_autocomplete_alter($query) {
  $roles = _privatemsg_limitroles_may_send_to();
  if (isset($roles[DRUPAL_AUTHENTICATED_RID])) {
    // If $user may send private msgs to authenticated users, then s/he can
    // send to anybody - so no limiting is needed.
    return;
  }
  $query->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->condition('ur.rid', $roles, 'IN');
}

function _privatemsg_limitroles_may_send_to() {
  global $user;
  $roles = array(0 => 0);
  foreach ($user->roles as $rid => $role) {
    $varname = 'privatemsg_limitroles_from_' . $rid;
    $settings = variable_get($varname, array());
    // array_filter only leaves the non-zero entries
    foreach (array_filter($settings) as $rid_to => $value) {
        $roles[$rid_to] = $rid_to;
    }
  }
  return $roles;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function privatemsg_limitroles_form_privatemsg_new_alter(&$form, $form_state) {
  global $user;
  // Allow uid=1 to send private messages to anyone.
  if ($user->uid != 1) {
    $form['recipient']['#element_validate'][] = 'privatemsg_limitroles_form_privatemsg_new_alter_recipient_validate';
  }
}

/**
 * Additional validate callback for privatemsg recipient names.
 */
function privatemsg_limitroles_form_privatemsg_new_alter_recipient_validate($element, &$form_state) {
  $usernames = drupal_explode_tags($element['#value']);
  if (!empty($usernames)) {
    $roles = _privatemsg_limitroles_may_send_to();
    if (isset($roles[DRUPAL_AUTHENTICATED_RID])) {
      // If $user may send private msgs to authenticated users, then s/he can
      // send to anybody - so no limiting is needed.
      return;
    }
    foreach ($usernames as $username) {
      if ($account = user_load_by_name($username)) {
        $allowed = FALSE;
        foreach ($account->roles as $rid => $role) {
          if (isset($roles[$rid])) {
            $allowed = TRUE;
            break;
          }
        }
        if (!$allowed) {
          form_set_error('recipient', t('Sending message to @name is not allowed. The user\'s account is either expired or not fully activated.', array('@name' => format_username($account))));
        }
      }
    }
  }
}
